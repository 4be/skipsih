---
stages:
  - build
  - deploy
  - test
  - analysis

default:
  image: docker.io/maven:3.8.1-adoptopenjdk-11
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .m2/repository

variables:
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=false
    -DdeployAtEnd=false

include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'
  - template: 'Code-Quality.gitlab-ci.yml'

test:
  stage: test
  services:
    - name: docker.io/postgres:11-alpine
      alias: postgres
  variables:
    POSTGRES_DB: sample
    POSTGRES_USER: sample
    POSTGRES_PASSWORD: sample_password
    SPRING_DATASOURCE_NAME: sample
    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/
    SPRING_DATASOURCE_USERNAME: sample
    SPRING_DATASOURCE_PASSWORD: sample_password
  script:
    - mvn $MAVEN_CLI_OPTS test
    - grep "Total" target/site/jacoco/index.html
  artifacts:
    when: always
    paths:
      - target
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

code_quality:
  stage: test
  artifacts:
    paths:
      - gl-code-quality-report.json

sonarcloud-check:
  stage: analysis
  needs:
    - test
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    SONAR_USER_HOME: $CI_PROJECT_DIR/.sonar
    GIT_DEPTH: 0
  script:
    - mvn $MAVEN_CLI_OPTS sonar:sonar
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
  cache:
    key: $CI_JOB_NAME
    paths:
      - .sonar/cache

build:
  stage: build
  script: mvn package -DskipTests
  artifacts:
    paths:
      - target/*.jar

deploy:
  stage: deploy
  image: alpine

  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

  script:
    - echo $SERVERNAME
    - echo $IPSERVER
    - ssh -o StrictHostKeyChecking=no $SERVERNAME@$IPSERVER "sudo systemctl stop speed.service"
    - ssh -o StrictHostKeyChecking=no $SERVERNAME@$IPSERVER "sudo rm -f /home/$SERVERNAME/opt/sinarmas/demo/demo-0.0.1-SNAPSHOT.jar
    - scp -o StrictHostKeyChecking=no target/*.jar $SERVERNAME@$IPSERVER:/home/$SERVERNAME/opt/sinarmas/demo
    - ssh -o StrictHostKeyChecking=no $SERVERNAME@$IPSERVER "sudo systemctl start speed.service"
    - ssh -o StrictHostKeyChecking=no $SERVERNAME@$IPSERVER "sudo systemctl status speed.service"

